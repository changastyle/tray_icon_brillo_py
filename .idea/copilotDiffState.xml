<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/brillo/BRILLO.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/brillo/BRILLO.py" />
              <option name="originalContent" value="from pystray import Icon, Menu, MenuItem&#10;from PIL import Image, ImageDraw, ImageFont&#10;import screen_brightness_control as sbc&#10;import threading&#10;import schedule&#10;import time&#10;&#10;AUTO_DIM_HOUR = &quot;05:49&quot;  # Hora programada para brillo automático&#10;&#10;# Variable global para el brillo actual&#10;current_brightness = sbc.get_brightness()[0]  # Obtener el brillo inicial&#10;&#10;# Función para crear un ícono dinámico con el nivel de brillo actual&#10;def create_icon(brightness):&#10;    width, height = 64, 64&#10;    image = Image.new(&quot;RGB&quot;, (width, height), &quot;white&quot;)&#10;    draw = ImageDraw.Draw(image)&#10;&#10;    # Texto a mostrar&#10;    text = f&quot;{brightness}%&quot;&#10;&#10;    # Configurar fuente y tamaño (fuente por defecto si no encuentra Arial)&#10;    try:&#10;        font = ImageFont.truetype(&quot;arial.ttf&quot;, 32)&#10;    except IOError:&#10;        font = ImageFont.load_default()&#10;&#10;    # Calcular posición del texto para centrarlo usando textbbox&#10;    text_bbox = draw.textbbox((0, 0), text, font=font)  # Calcula los límites del texto&#10;    text_width = text_bbox[2] - text_bbox[0]  # Ancho&#10;    text_height = text_bbox[3] - text_bbox[1]  # Alto&#10;&#10;    text_x = (width - text_width) // 2  # Centrar horizontalmente&#10;    text_y = (height - text_height) // 2  # Centrar verticalmente&#10;&#10;    # Dibujar el texto en la imagen&#10;    draw.text((text_x, text_y), text, fill=&quot;black&quot;, font=font)&#10;    return image&#10;&#10;# Función para actualizar el icono con el brillo actual&#10;def update_icon(icon):&#10;    icon.icon = create_icon(current_brightness)  # Actualiza el icono dinámicamente&#10;&#10;# Función genérica para ajustar el brillo&#10;def adjust_brightness(amount, icon, item):&#10;    global current_brightness&#10;    try:&#10;        # Modificar el brillo con el límite de 0 a 100&#10;        new_brightness = max(0, min(current_brightness + amount, 100))&#10;        sbc.set_brightness(new_brightness)  # Aplicar el nuevo brillo&#10;        current_brightness = new_brightness  # Actualizar la variable global&#10;        print(f&quot;Brillo ajustado a {new_brightness}%&quot;)&#10;        update_icon(icon)  # Actualizar icono&#10;    except Exception as e:&#10;        print(f&quot;Error al ajustar el brillo: {e}&quot;)&#10;&#10;# Funciones específicas para ajustar el brillo&#10;def increase_brightness(icon, item):&#10;    adjust_brightness(10, icon, item)  # Aumentar brillo en 10%&#10;&#10;def decrease_brightness(icon, item):&#10;    adjust_brightness(-10, icon, item)  # Reducir brillo en 10%&#10;&#10;def set_brightness_100(icon, item):&#10;    global current_brightness&#10;    current_brightness = 100&#10;    sbc.set_brightness(100)  # Establecer brillo al 100%&#10;    print(&quot;Brillo establecido al 100%&quot;)&#10;    update_icon(icon)  # Actualizar icono&#10;&#10;def set_brightness_0(icon, item):&#10;    global current_brightness&#10;    current_brightness = 0&#10;    sbc.set_brightness(0)  # Establecer brillo al 0%&#10;    print(&quot;Brillo establecido al 0%&quot;)&#10;    update_icon(icon)  # Actualizar icono&#10;&#10;def set_brightness_50(icon, item):&#10;    global current_brightness&#10;    current_brightness = 50&#10;    sbc.set_brightness(50)  # Establecer brillo al 50%&#10;    print(&quot;Brillo establecido al 50%&quot;)&#10;    update_icon(icon)  # Actualizar icono&#10;&#10;# Crear menú para el tray icon&#10;menu = Menu(&#10;    MenuItem(&quot;Subir brillo al 100%&quot;, set_brightness_100),&#10;    MenuItem(&quot;Subir brillo 10%&quot;, increase_brightness),&#10;    MenuItem(&quot;Bajar brillo 50%&quot;, set_brightness_50),&#10;    MenuItem(&quot;Bajar brillo 10%&quot;, decrease_brightness),&#10;    MenuItem(&quot;Bajar brillo al 0%&quot;, set_brightness_0),&#10;    MenuItem(&quot;Salir&quot;, lambda icon, item: icon.stop())&#10;)&#10;&#10;# Función para manejar clic izquierdo en el icono&#10;def on_left_click(icon, event):&#10;    # Puedes definir lo que debe hacer al hacer clic izquierdo&#10;    print(&quot;Clic izquierdo realizado. Opciones disponibles:&quot;)&#10;    icon.menu = menu  # Cambia el menú al hacer clic izquierdo&#10;    icon.visible = True  # Asegúrate de que el icono sea visible&#10;    icon.update_menu()&#10;&#10;def auto_dim():&#10;    global current_brightness&#10;    try:&#10;        if current_brightness != 0:&#10;            sbc.set_brightness(0)&#10;            current_brightness = 0&#10;            print(&quot;Brillo automático: 0% por horario nocturno (schedule)&quot;)&#10;            update_icon(icon)&#10;    except Exception as e:&#10;        print(f&quot;Error al poner brillo en 0%: {e}&quot;)&#10;&#10;# Programar la tarea diaria a las 21:00&#10;schedule.every().day.at(AUTO_DIM_HOUR).do(auto_dim)&#10;&#10;def schedule_thread():&#10;    while True:&#10;        schedule.run_pending()&#10;        time.sleep(30)&#10;&#10;# Inicializar el ícono con el brillo actual&#10;icon = Icon(&quot;Control de Brillo&quot;, create_icon(current_brightness), menu=menu)&#10;&#10;# Asignar evento de clic izquierdo&#10;icon.on_left_click = on_left_click&#10;&#10;# Lanzar el hilo de schedule para la tarea automática&#10;threading.Thread(target=schedule_thread, daemon=True).start()&#10;&#10;# Ejecutar el tray icon&#10;icon.run()&#10;" />
              <option name="updatedContent" value="from pystray import Icon, Menu, MenuItem&#10;from PIL import Image, ImageDraw, ImageFont&#10;import screen_brightness_control as sbc&#10;import threading&#10;import schedule&#10;import time&#10;import math&#10;&#10;AUTO_DIM_HOUR = &quot;05:49&quot;  # Hora programada para brillo automático&#10;&#10;# Variable global para el brillo actual&#10;current_brightness = sbc.get_brightness()[0]  # Obtener el brillo inicial&#10;&#10;# Función para crear un ícono dinámico con el nivel de brillo actual&#10;def create_icon(brightness):&#10;    width, height = 64, 64&#10;    image = Image.new(&quot;RGBA&quot;, (width, height), (0, 0, 0, 0))  # Fondo transparente&#10;    draw = ImageDraw.Draw(image)&#10;&#10;    # Dibujar el sol (círculo amarillo)&#10;    sun_radius = 22&#10;    sun_center = (width // 2, height // 2)&#10;    draw.ellipse([&#10;        sun_center[0] - sun_radius, sun_center[1] - sun_radius,&#10;        sun_center[0] + sun_radius, sun_center[1] + sun_radius&#10;    ], fill=&quot;#FFD700&quot;, outline=&quot;#FFA500&quot;, width=2)&#10;&#10;    # Dibujar rayos del sol&#10;    for angle in range(0, 360, 30):&#10;        x1 = sun_center[0] + int((sun_radius + 4) * math.cos(math.radians(angle)))&#10;        y1 = sun_center[1] + int((sun_radius + 4) * math.sin(math.radians(angle)))&#10;        x2 = sun_center[0] + int((sun_radius + 12) * math.cos(math.radians(angle)))&#10;        y2 = sun_center[1] + int((sun_radius + 12) * math.sin(math.radians(angle)))&#10;        draw.line([(x1, y1), (x2, y2)], fill=&quot;#FFA500&quot;, width=2)&#10;&#10;    # Texto a mostrar (porcentaje de brillo)&#10;    text = f&quot;{brightness}%&quot;&#10;    try:&#10;        font = ImageFont.truetype(&quot;arial.ttf&quot;, 18)&#10;    except IOError:&#10;        font = ImageFont.load_default()&#10;    text_bbox = draw.textbbox((0, 0), text, font=font)&#10;    text_width = text_bbox[2] - text_bbox[0]&#10;    text_height = text_bbox[3] - text_bbox[1]&#10;    text_x = sun_center[0] - text_width // 2&#10;    text_y = sun_center[1] - text_height // 2&#10;    draw.text((text_x, text_y), text, fill=&quot;black&quot;, font=font)&#10;    return image&#10;&#10;# Función para actualizar el icono con el brillo actual&#10;def update_icon(icon):&#10;    icon.icon = create_icon(current_brightness)  # Actualiza el icono dinámicamente&#10;&#10;# Función genérica para ajustar el brillo&#10;def adjust_brightness(amount, icon, item):&#10;    global current_brightness&#10;    try:&#10;        # Modificar el brillo con el límite de 0 a 100&#10;        new_brightness = max(0, min(current_brightness + amount, 100))&#10;        sbc.set_brightness(new_brightness)  # Aplicar el nuevo brillo&#10;        current_brightness = new_brightness  # Actualizar la variable global&#10;        print(f&quot;Brillo ajustado a {new_brightness}%&quot;)&#10;        update_icon(icon)  # Actualizar icono&#10;    except Exception as e:&#10;        print(f&quot;Error al ajustar el brillo: {e}&quot;)&#10;&#10;# Funciones específicas para ajustar el brillo&#10;def increase_brightness(icon, item):&#10;    adjust_brightness(10, icon, item)  # Aumentar brillo en 10%&#10;&#10;def decrease_brightness(icon, item):&#10;    adjust_brightness(-10, icon, item)  # Reducir brillo en 10%&#10;&#10;def set_brightness_100(icon, item):&#10;    global current_brightness&#10;    current_brightness = 100&#10;    sbc.set_brightness(100)  # Establecer brillo al 100%&#10;    print(&quot;Brillo establecido al 100%&quot;)&#10;    update_icon(icon)  # Actualizar icono&#10;&#10;def set_brightness_0(icon, item):&#10;    global current_brightness&#10;    current_brightness = 0&#10;    sbc.set_brightness(0)  # Establecer brillo al 0%&#10;    print(&quot;Brillo establecido al 0%&quot;)&#10;    update_icon(icon)  # Actualizar icono&#10;&#10;def set_brightness_50(icon, item):&#10;    global current_brightness&#10;    current_brightness = 50&#10;    sbc.set_brightness(50)  # Establecer brillo al 50%&#10;    print(&quot;Brillo establecido al 50%&quot;)&#10;    update_icon(icon)  # Actualizar icono&#10;&#10;# Crear menú para el tray icon&#10;menu = Menu(&#10;    MenuItem(&quot;Subir brillo al 100%&quot;, set_brightness_100),&#10;    MenuItem(&quot;Subir brillo 10%&quot;, increase_brightness),&#10;    MenuItem(&quot;Bajar brillo 50%&quot;, set_brightness_50),&#10;    MenuItem(&quot;Bajar brillo 10%&quot;, decrease_brightness),&#10;    MenuItem(&quot;Bajar brillo al 0%&quot;, set_brightness_0),&#10;    MenuItem(&quot;Salir&quot;, lambda icon, item: icon.stop())&#10;)&#10;&#10;# Función para manejar clic izquierdo en el icono&#10;def on_left_click(icon, event):&#10;    # Puedes definir lo que debe hacer al hacer clic izquierdo&#10;    print(&quot;Clic izquierdo realizado. Opciones disponibles:&quot;)&#10;    icon.menu = menu  # Cambia el menú al hacer clic izquierdo&#10;    icon.visible = True  # Asegúrate de que el icono sea visible&#10;    icon.update_menu()&#10;&#10;def auto_dim():&#10;    global current_brightness&#10;    try:&#10;        if current_brightness != 0:&#10;            sbc.set_brightness(0)&#10;            current_brightness = 0&#10;            print(&quot;Brillo automático: 0% por horario nocturno (schedule)&quot;)&#10;            update_icon(icon)&#10;    except Exception as e:&#10;        print(f&quot;Error al poner brillo en 0%: {e}&quot;)&#10;&#10;# Programar la tarea diaria a las 21:00&#10;schedule.every().day.at(AUTO_DIM_HOUR).do(auto_dim)&#10;&#10;def schedule_thread():&#10;    while True:&#10;        schedule.run_pending()&#10;        time.sleep(30)&#10;&#10;# Inicializar el ícono con el brillo actual&#10;icon = Icon(&quot;Control de Brillo&quot;, create_icon(current_brightness), menu=menu)&#10;&#10;# Asignar evento de clic izquierdo&#10;icon.on_left_click = on_left_click&#10;&#10;# Lanzar el hilo de schedule para la tarea automática&#10;threading.Thread(target=schedule_thread, daemon=True).start()&#10;&#10;# Ejecutar el tray icon&#10;icon.run()" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>